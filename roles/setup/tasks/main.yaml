---
- name: Get datestamp from the system
  shell: date +"%Y%m%d"
  register: dstamp
  changed_when: false

- name: Set current date stamp varible
  set_fact:
    cur_date: "{{ dstamp.stdout }}"

- name: Check for first run
  stat:
    path: /var/run/bootstrapped
  register: already_bootstrapped

# Update and install the base software
- name: Update apt package cache
  apt:
    update_cache: yes
    cache_valid_time: 3600

- name: Upgrade installed apt packages 
  apt:
    upgrade: dist
  register: upgrade
  retries: 3
  delay: 5
  until: upgrade is success

- name: Ensure that these software packages are installed
  apt:
    pkg:
      - apt-transport-https
      - ca-certificates
      - curl
      - git
      - htop
      - nano
      - needrestart
      - net-tools
      - pwgen
      - python3-pip
      - python3-setuptools
      - software-properties-common
      - unbound
      - unzip
      - virtualenv
      - wget
    state: latest

# Pi Setup
- name: Fix console HDMI output on RPi
  copy:
    dest: /boot/firmware/config.txt
    content: "{{ lookup('file', 'config.txt') }}"

# Host Setup
- name: Set static hostname
  hostname:
    name: "{{ inventory_hostname_short }}"

- name: Add FQDN to /etc/hosts
  lineinfile:
    dest: /etc/hosts
    regexp: '^127\.0\.0\.1'
    line: '127.0.0.1 {{ inventory_hostname }} {{ inventory_hostname_short }}'
    state: present

- name: Set Timezone
  timezone:
    name: "{{ tmzone }}"

# Set sudo password timeout (default is 15 minutes)
- name: Set sudo password timeout
  lineinfile:
    path: /etc/sudoers
    state: present
    regexp: '^Defaults\tenv_reset'
    line: 'Defaults env_reset, timestamp_timeout={{ sudo_timeout }}'
    validate: '/usr/sbin/visudo -cf %s'

- name: Create/update regular user with sudo privileges
  user:
    name: "{{ user }}"
    password: "{{ user_password }}"
    state: present
    groups: sudo
    append: true
    shell: /bin/bash

- name: Ensure authorized keys for remote user is installed
  authorized_key:
    user: "{{ user }}"
    state: present
    key: "{{ lookup('file', ssh_pub_key) }}"

- name: Ensure authorized key for root user is installed
  authorized_key:
    user: root
    state: present
    key: "{{ lookup('file', ssh_root_pub_key) }}"

- name: Update root user password.
  user:
    name: root
    password: "{{ root_password }}"

- name: Disable password authentication for root
  lineinfile:
    path: /etc/ssh/sshd_config
    state: present
    regexp: '^#?PermitRootLogin'
    line: 'PermitRootLogin prohibit-password'
  notify:
    - restart sshd

- name: Disable tunneled clear-text passwords
  lineinfile:
    path: /etc/ssh/sshd_config
    state: present
    regexp: '^#?PasswordAuthentication'
    line: 'PasswordAuthentication no'
  notify:
    - restart sshd

- name: Set user PS1 to a two-line prompt
  lineinfile:
    dest: "/home/{{ user }}/.bashrc"
    insertafter: EOF
    line: "PS1='${debian_chroot:+($debian_chroot)}\\[\\033[01;32m\\]\\u@\\h\\[\\033[00m\\]:\\[\\033[01;34m\\]\\w\\[\\033[00m\\]\\n\\$ '"
    state: present

- name: Set root PS1 to a two-line prompt
  lineinfile:
    path: '/root/.bashrc'
    state: present
    insertafter: EOF
    line: PS1='${debian_chroot:+($debian_chroot)}\u@\h:\w\n\$ '

# Configure a firewall
- name: Manage the firewall
  block:      
    - name: Disable and reset ufw firewall to installation defaults.
      when: not already_bootstrapped.stat.exists
      ufw:
        state: reset

    - name: Find backup rules to delete
      find:
        paths: /etc/ufw
        patterns: "*.{{ cur_date }}_*"
        use_regex: no
      register: files_to_delete

    - name: Delete ufw backup rules
      file:
        path: "{{ item.path }}"
        state: absent
      with_items: "{{ files_to_delete.files }}"

    - name: Allow ssh port '{{ ssh_port }}'.
      ufw:
        rule: allow
        proto: tcp
        port: '{{ ssh_port }}'
        state: enabled

    - name: Turn UFW logging off
      ufw:
        logging: "off"


- name: Check if a reboot is needed for Debian-based systems
  stat:
    path: /var/run/reboot-required
  register: reboot_required

- name: run needrestart
  command: needrestart -r a
  when: not reboot_required.stat.exists and upgrade.changed

- name: Reboot the server if needed
  reboot:
    msg: "Reboot initiated by Ansible because of reboot required file."
    connect_timeout: 5
    reboot_timeout: 600
    pre_reboot_delay: 0
    post_reboot_delay: 30
    test_command: whoami
  when: reboot_required.stat.exists

- name: Remove old packages from the cache
  apt:
    autoclean: yes

- name: Remove dependencies that are no longer needed
  apt:
    autoremove: yes
    purge: yes

- name: Mark first run complete
  when: not already_bootstrapped.stat.exists
  shell: touch /var/run/bootstrapped
  